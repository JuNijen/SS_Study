{"ast":null,"code":"import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      input: '',\n      todos: [{\n        id: 0,\n        text: '할 일을 입력하세요.',\n        checked: false\n      }]\n    };\n    this.id = 1;\n\n    this.handleChange = e => {\n      this.setState({\n        // input 의 다음 바뀔 값\n        input: e.target.value\n      });\n    };\n\n    this.handleCreate = () => {\n      const {\n        input,\n        todos\n      } = this.state;\n      this.setState({\n        // input을 비우고, concat을 이용해서 배열에 추가한다.\n        input: '',\n        todos: todos.concat({\n          id: this.id++,\n          text: input,\n          checked: false\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      if (e.key === 'Enter') {\n        this.handleCreate();\n      }\n    };\n\n    this.handleToggle = id => {\n      const {\n        todos\n      } = this.state; // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n\n      const index = todos.findIndex(todo => todo.id === id);\n      const selected = todos[index]; // 선택한 객체\n\n      const nextTodos = [...todos]; // 배열을 복사\n      // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n      nextTodos[index] = { ...selected,\n        checked: !selected.checked\n      };\n      this.setState({\n        todos: nextTodos\n      });\n    };\n\n    this.handleRemove = id => {\n      const {\n        todos\n      } = this.state;\n      this.setState({\n        todos: todos.filter(todo => todo.id !== id)\n      });\n    };\n  }\n\n  render() {\n    const {\n      input,\n      todos\n    } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n    return /*#__PURE__*/React.createElement(TodoListTemplate, {\n      form: /*#__PURE__*/React.createElement(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate\n      })\n    }, /*#__PURE__*/React.createElement(TodoItemList, {\n      todos: todos,\n      onToggle: handleToggle,\n      onRemove: handleRemove\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","TodoListTemplate","Form","TodoItemList","App","state","input","todos","id","text","checked","handleChange","e","setState","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter","render","createElement","form","onKeyPress","onChange","onCreate","onToggle","onRemove"],"sources":["D:/JSE/SIEUN/React/demo-project/todo-list/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\nclass App extends Component {\n\n    // 사전에 기입되는 데이터\n    state = {\n        input: '',\n        todos: [\n            {\n                id: 0,\n                text: '할 일을 입력하세요.',\n                checked: false\n            },\n        ],\n    }\n    \n    // 사전 데이터 이후로 추가되게끔\n    id = 1\n\n    // 변경되었을 경우\n    handleChange = (e) => {\n        this.setState({\n            // input 의 다음 바뀔 값\n            input: e.target.value\n        });\n    }\n\n    handleCreate = () => {\n        const {input, todos} = this.state;\n        this.setState({\n            // input을 비우고, concat을 이용해서 배열에 추가한다.\n            input: '',\n            todos: todos.concat({\n                id: this.id++,\n                text: input,\n                checked: false\n            })\n        });\n    }\n\n    // 키 입력이 감지되었을 경우\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.handleCreate();\n        }\n    }\n\n    handleToggle = (id) => {\n        const {todos} = this.state;\n\n        // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n        const index = todos.findIndex(todo => todo.id === id);\n        const selected = todos[index]; // 선택한 객체\n        const nextTodos = [...todos];  // 배열을 복사\n\n        // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n        nextTodos[index] = {\n            ...selected,\n            checked: !selected.checked\n        };\n\n        this.setState({todos: nextTodos});\n    }\n\n    handleRemove = (id) => {\n        const {todos} = this.state;\n\n        this.setState({\n            todos: todos.filter(todo => todo.id !== id)\n        });\n    }\n\n    render() {\n        const {input, todos} = this.state;\n        const {\n            handleChange,\n            handleCreate,\n            handleKeyPress,\n            handleToggle,\n            handleRemove,\n        } = this;\n        \n        return (\n          React.createElement(TodoListTemplate, { form: (React.createElement(Form, { value: input, onKeyPress: handleKeyPress, onChange: handleChange, onCreate: handleCreate })) },\n          React.createElement(TodoItemList, { todos: todos, onToggle: handleToggle, onRemove: handleRemove }))      \n        );\n    }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}